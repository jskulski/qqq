* 2.0 - A Polished Thing

"Do one thing well"

Slim down all the extras. Focus on print debugging from anywhere in ruby.

** 0.1.4 

- [ ] Plumb qq for introspection in ruby 
  - [ ] Print variable name
  - [ ] Print function/line if possible
  - [ ] Print time since last message

[uuid] [timestamp]
<message>

** 0.1.3

- [X] Proof of concept generated CLI/gem/api
- [X] file worker (append to /tmp/qqq)
- [X] create dashboard module

** 0.1.2

- [X] Simplify dashboard, easier to read
- [X] remove send... for now. 
- [X] remove payload command for only tail
- [X] mark command can optionally repeat

** 0.1.1 

- [X] Hack around fakeredis to get redis connection, if enabled
- [X] Remove messages in favor of richer Event structure
- [X] increments if run multiple times..
- [X] q, qq, qqq levels 

* DONE 0.1.0 - A Thing

"It's doing /something/"

features
- [X] recorded timestamp and uuid recorded in db through app
- [X] record message in a database
- [X] send to an api
- [X] timestamps 
- [X] send message from command line
- [X] tail and mark from command line

dev
- [X] Create rudimentary uh... dashboard/orchestration
- [X] Create e2e.sh
- [X] Remove payload/messages dichotomy

* Roadmap 

** Table stakes / cleanup
- [ ] Add enough documentation to hello, world (and understand what qqq is) 
- [ ] get someone else to install it, use it
- [ ] Supervisor around cli, etc. e.g. api send dies if server not up yet
- [ ] Cut out redis for ruby pubsub? generate servers for every lang..? just make them..?  https://blog.appsignal.com/2018/08/28/push-and-pubsub-in-ruby.html
- [ ] more tests? CI?

** user features
- [ ] did not run (no wondering if line didn't run)... possible?
- [ ] start / stop 'marks' 
- [ ] some recent history (last 100?) when I start tailing
- [ ] plugin arch for worker 
- [ ] updated development documentation 
- [ ] api key to follow me around (~/.qqq.conf or whatever) 
- [ ] updating webapp (websockets) 
- [ ] handles complex object printing
- [ ] accept payloads, rich data, rich data
- [ ] config panel to turn on/off 'q steams'
- [ ] a way to specify a 'runable function' like a test maybe?
- [ ] return the message so you can do `qqq somevalue == someother`

- metadata
  - [ ] reflection
  - [ ] add classes, type, information

QQQ.define do
    data = Data.find(some_id)
    qqq data
end


** dev
- [ ] system messaging for testing and debug
- [ ] a way to specifiy redis config
- [ ] replace with own pubsub server...
- [ ] how can i test this whole system
- [ ] system log channel, 
- [ ] perhaps.. handshake system for handling processes, testing?
- [ ] local gem dev - de-req rake install loop 
- [ ] split out configuration (yaml?) for 'service' interaction
- [ ] split the development panel / user panel

universal transpiler...yum
https://github.com/koczkatamas/onelang

** brewing ideas

- get off redis... https://faye.jcoglan.com/ruby/clients.html
- move to a ruby only actor model? (https://github.com/ntl/actor)
- other langs, javascript?
- electron app for dashboard? get away from shell stuff... 

restreaming
- qqq.restream(:my_event) do |event| 
    ...
  end

- log to the standard log with a link to the specific log
 
check out https://github.com/janlelis/debugging

*** Writing a program to generate the apis...

 Could I write some sort of program that could.. create these clients? 

 #+begin_src lisp
   (namespace :QQQ :CLI
     (define-cli
       (define-task "tail"
         (qqq/subscribe (key message-channel) print-event-to-screen)))

     (define-function print-event-to-screen (event)
       (system-output-command
        (brackets (:timestamp event))
        (space)
        (brackets (:uuid event))
        (space)
        (brackets (:message event))
        (newline))))

   (namespace
    :QQQ :API
    (define-function :publish (message)
      (redis :publish (key event-channel)
             (marshall-to-json (create-event
                                (create-uuid
                                 create-timestamp
                                 message)))))

   (namespace
    :QQQ :API
    (define-function :subscribe (function_or_callable)
      (redis :subscribe (key event-channel)
             (lambda (event) (call function_or_callable event)))))
 #+end_src


 Could potentially use org-mode/tangle to do multi-lang well

 (After qqq, do developer user interviews screen share to find real patterns...)

 Under heading * Ruby ** Define Module

 #+value: module-name
 #+value: content
 #+begin_src ruby
 defmodule #{module-name}
    #{content}
 end
 #+end_src

 I bet that could done reasonably in ruby...


 #+begin_src ruby
   class Generator
     attr_reader :lang
     def define_namespace (name, &content_block)
       #render :erb, "path/to/_module.erb", name, content_block.render
   <<-END
   defmodule #{name}
     #{content_block.render}
   end
   END
     end


   define_namespace(:QQQ) do
     define_module(:CLI) do 
       define_func(:echo, :argument_vector) do |messages|
         Generated::Formatters::ForHumans.format(messages)
         Generated::Library::QQQ::publish 
       end
     end
   end
 #+end_src



*** Testing system.

Each module speaks in pub/sub. Thinking SYN/ACK style of testing.

Each test case needs an environment to target
Ideally can target a running system or spin one up 
Shell-like access ability to create processes and control interaction...

Each module MUST respond to a `SYN` command, sent over actual wire.
Each SYN command will come with a unique key and destination
Each module MUST silently handle this, never display to the user.
Each module MUST publish an ACK response message on system channel


modules: 
- fileappender
- ruby functions
- ruby cli
- node cli
- node functions
- web app
*** Monitoring system

Double ledger accounting? 

Each module must send events 1 by 1 but also send as a batch.
